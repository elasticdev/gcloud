#!/usr/bin/env python

import os
import json
from ed_helper_publisher.utilities import print_json

terraform_state_file = os.environ.get("TERRAFORM_STATE_FILE","terraform.tfstate")

with open(terraform_state_file) as json_file:
    data = json.load(json_file)

if not data:
    print "ERROR - there is no data from {}".format(os.path.join(os.getcwd(),terraform_state_file))
    exit(9)

# filter by terraform resource type e.g. google_compute_network
terraform_resource_type = os.environ.get("TERRAFORM_RESOURCE_TYPE")

if not terraform_resource_type:
    print "ERROR - environment variable TERRAFORM_RESOURCE_TYPE needs to be set"
    exit(9)

# resource type to filter within ED e.g. subnet, vpc, firewall
resource_type = os.environ.get("RESOURCE_TYPE")
if not resource_type: print "WARNING - environment variable RESOURCE_TYPE not set"

# cloud provider e.g. aws, google_compute, azure
cloud_provider = os.environ.get("CLOUD_PROVIDER")
if not cloud_provider: print "WARNING - environment variable CLOUD_PROVIDER not set"

# default region in cloud provider format e.g. us-east-1, us-east1
default_region = os.environ.get("DEFAULT_REGION")

# special treatment for vpc and vpc_id
vpc_name = os.environ.get("VPC_NAME")
vpc_id = os.environ.get("VPC_ID")

# special treatment for a main resource like vpc.  vpc 
# resource main is loosely liken to a parent in that
# many resources dependent on it
main = os.environ.get("RESOURCE_MAIN",True)

_map_keys = os.environ.get("RESOURCE_MAP_KEYS")

map_keys = {}

if _map_keys: 
    for item in _map_keys.split(","):
        try:
            _elements = item.split(":")
            map_keys[_elements[0].strip()] = _elements[1].strip()
        except:
            print 'could not map the resource keys for "{}"'.format(item)

results = [ ]

for resource in data["resources"]:

    _type = resource["type"]
    if _type != terraform_resource_type: continue

    for instance in resource["instances"]:

        _instance = {}

        for _key,_value in resource["instances"][0]["attributes"].iteritems():
            _instance[_key] = _value

        _instance["type"] = _type

        if default_region: _instance["default_region"] = default_region

        if vpc_name: 
            _instance["vpc"] = vpc_name
            _instance["vpc_name"] = vpc_name

        if vpc_id: _instance["vpc_id"] = vpc_id
        if main: _instance["main"] = True
        if resource_type: _instance["resource_type"] = resource_type

        if cloud_provider:
            _instance["provider"] = cloud_provider
            _instance["cloud_provider"] = cloud_provider

        if map_keys: 
            for _k,_v in map_keys.items():
                try:
                    _instance["{}".format(_v)] = _instance[_k]
                except:
                    print 'could not map the resource keys for "{}:{}"'.format(_k,_v)

        results.append(_instance)

print '_ed_begin_output'
print_json(results)
print '_ed_end_output'
