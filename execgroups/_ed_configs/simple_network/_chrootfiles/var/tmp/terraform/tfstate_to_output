#!/usr/bin/env python

import os
import json
from ed_helper_publisher.utilities import print_json

terraform_state_file = os.environ.get("TERRAFORM_STATE_FILE","terraform.tfstate")

with open(terraform_state_file) as json_file:
    data = json.load(json_file)

if not data:
    print "ERROR - there is no data from {}".format(os.path.join(os.getcwd(),terraform_state_file))
    exit(9)

# Get the parent network or vpc
for resource in data["resources"]:
    for instance in resource["instances"]:

        _type = resource["type"]
        if _type != "google_compute_network": continue

        network_resource = {}
        for _key,_value in resource["instances"][0]["attributes"].iteritems():
            network_resource[_key] = _value

        network_resource["network_name"] = network_resource["name"]
        network_resource["_id"] = network_resource["id"]
        network_resource["network_id"] = network_resource["id"]
        network_resource["resource_type"] = "network"
        network_resource["main"] = True

        if os.environ.get("GOOGLE_DEFAULT_REGION"):
            network_resource["google_default_region"] = os.environ["GOOGLE_DEFAULT_REGION"]

        results = [ network_resource ]

for resource in data["resources"]:

    _type = resource["type"]
    if _type == "google_compute_network": continue

    for instance in resource["instances"]:

        _instance = {}

        for _key,_value in resource["instances"][0]["attributes"].iteritems():
            _instance[_key] = _value

        _instance["parent"] = network_resource["id"]
        _instance["network_id"] = network_resource["id"]
        _instance["network_name"] = network_resource["network_name"]
        _instance["network"] = network_resource["network_name"]
        _instance["resource_type"] = _type
        _instance["provider"] = "google_compute"
        _instance["resource_type"] = _type.split("google_compute_")[1]
        _instance["type"] = _type

        if os.environ.get("GOOGLE_DEFAULT_REGION"):
            _instance["google_default_region"] = os.environ["GOOGLE_DEFAULT_REGION"]

        results.append(_instance)

print '_ed_begin_output'
print_json(results)
print '_ed_end_output'

#for result in results:
#    print ''
#    print_json(result)

