#!/usr/bin/env python

import os
import json

class MissingEnvironmentVariable(Exception):
    pass

# dup dhdskyeucnfhrt2634521 
def get_tf_env_var(variable,default=None,must_exists=None):

    _value = os.environ.get(variable)
    if _value: return _value

    _value = os.environ.get("TF_VAR_{}".format(variable))
    if _value: return _value

    _value = os.environ.get("TF_VAR_{}".format(variable.lower()))
    if _value: return _value

    _value = os.environ.get("TF_VAR_{}".format(variable.upper()))
    if _value: return _value

    if not must_exists: return
    raise MissingEnvironmentVariable("{} does not exist".format(variable))

def write_cloud_creds():

    stateful_dir = get_tf_env_var("STATEFUL_DIR",must_exists=True)
    stateful_id = get_tf_env_var("STATEFUL_ID",must_exists=True)
    share_dir = get_tf_env_var("STATEFUL_DIR",default="/var/tmp/share")

    if stateful_dir:
        print "stateful_dir explicitly set on environmental variable"
    elif stateful_id:
        stateful_dir = os.path.join(share_dir,stateful_id)
    else:
        print "ERROR: STATEFUL_ID or STATEFUL_DIR needs to be specified"
        exit(9)

    abs_google_application_credentials = os.path.join(stateful_dir,".creds","gcloud.json")
    creds_dir = os.path.dirname(abs_google_application_credentials)

    project_id = get_tf_env_var("GCLOUD_PROJECT",must_exists=True)
    private_key_id = get_tf_env_var("GCLOUD_PRIVATE_KEY_ID",must_exists=True)
    private_key = get_tf_env_var("GCLOUD_PRIVATE_KEY",must_exists=True)
    client_id = get_tf_env_var("GCLOUD_CLIENT_ID",must_exists=True)
    client_email = get_tf_env_var("GCLOUD_CLIENT_EMAIL",must_exists=True)
    client_x509_cert_url = get_tf_env_var("GCLOUD_CLIENT_X509_CERT_URL",must_exists=True)
    auth_uri = get_tf_env_var("GCLOUD_AUTH_URI",default="https://accounts.google.com/o/oauth2/auth")
    token_uri = get_tf_env_var("GCLOUD_TOKEN_URI",default="https://oauth2.googleapis.com/token")
    auth_provider = get_tf_env_var("GCLOUD_AUTH_PROVIDER",default="https://www.googleapis.com/oauth2/v1/certs")

    values = { "type": "service_account",
               "auth_uri": auth_uri,
               "token_uri": token_uri,
               "auth_provider_x509_cert_url": auth_provider,
               "project_id": project_id,
               "private_key_id": private_key_id,
               "private_key": private_key,
               "client_email": client_email,
               "client_id": client_id,
               "client_x509_cert_url": client_x509_cert_url,
               }

    #json_object = json.dumps(values,indent=2,separators=(',', ': ')) 
    json_object = json.dumps(values,indent=2).replace('\\\\','\\')

    if not os.path.exists(creds_dir): os.system("mkdir -p {}".format(creds_dir))
      
    print "gcloud directory {} ...".format(abs_google_application_credentials)

    # Writing to sample.json 

    with open(abs_google_application_credentials, "w") as outfile: 
        outfile.write(json_object) 

if __name__ == '__main__':

    write_cloud_creds()
