#!/usr/bin/env python
#
#This file is part of "jiffy".
#
#Project: jiffy: A product for building and managing infrastructure: 
#cloud provider services, and servers and their configurations.
#
#Description: A product for building and managing infrastructure. 
#This includes third party API calls for services such as virtual
#cloud servers, load balancers, databases, and other. The product 
#manages connectivity and appropriate communication among these 
#aws.
#
#Copyright (C) Gary Leong - All Rights Reserved
#Unauthorized copying of this file, via any medium is strictly prohibited
#Proprietary and confidential
#Written by Gary Leong  <gwleong@gmail.com, September 17,2015

import os
#import json
import jinja2
import sys
from time import sleep

from ed_helper_publisher.loggerly import ElasticDevLogger
from ed_helper_publisher.cloud.gcloudcli import GcloudCli
from ed_helper_publisher.shellouts import execute3
#from ed_helper_publisher.utilities import convert_str2json

class Main(GcloudCli):

    def __init__(self,**kwargs):

        GcloudCli.__init__(self)
        self.classname = 'GcloudBuilder'
        self.logger = ElasticDevLogger(self.classname,logcategory="cloudprovider")
        self.logger.debug("Instantiating %s" % self.classname)
        self.product = "container_builder"
        self.provider = "gcloud"
        self.shelloutconfig = "elasticdev:::gcloud::container_builder"

        # Image name in the gcloud registry is not the fq path 
        # of the image.  
        #
        # e.g. gcr.io/project1-282607/hellospring, the image name is
        # only "hellospring".  the DOCKER_IMAGE environment variable
        # would differ and be fq and equate to "gcr.io/project1-282607/hellospring"
        # this is the nomenclature

    def _set_uninputted_variables(self):

        if not self.inputargs.get("gcloud_src_dir"):
            if self.inputargs.get("docker_build_dir"):
                self.inputargs["gcloud_src_dir"] = self.inputargs["docker_build_dir"]
            else:
                self.inputargs["gcloud_src_dir"] = "/var/tmp/docker/build"

        if not self.inputargs.get("gcloud_template_file_path"):
            self.inputargs["gcloud_template_file_path"] = os.path.join(self.inputargs["gcloud_src_dir"],"cloudbuild.yaml.ja2")

        if not self.inputargs.get("gcloud_config_file_path"):
            self.inputargs["gcloud_config_file_path"] = os.path.join(self.inputargs["gcloud_src_dir"],"cloudbuild.yaml")

    def _template_to_config(self):

        templateVars = {"GCLOUD_PROJECT":self.gcloud_project}
        templateVars["IMAGE_NAME"] = self.inputargs["image_name"]

        src_filepath = self.inputargs["gcloud_template_file_path"]
        dst_filepath = self.inputargs["gcloud_config_file_path"]
        templateLoader = jinja2.FileSystemLoader(searchpath="/")
        templateEnv = jinja2.Environment(loader=templateLoader)
        template = templateEnv.get_template(src_filepath)
        outputText = template.render( templateVars )
        writefile = open(dst_filepath,"wb")
        writefile.write(outputText)
        writefile.close()

    def _run(self):
    
        status = self.init_docker_run()

        if not status:
            self.cleanup_docker_run()
            exit(9)

        cmd = "docker run --rm -ti -v {}:{} --volumes-from {} google/cloud-sdk gcloud builds submit --config {} {}".format(self.inputargs["gcloud_src_dir"],
                                                                                                                           self.inputargs["gcloud_src_dir"],
                                                                                                                           self.gcloud_container_name,
                                                                                                                           self.inputargs["gcloud_config_file_path"],
                                                                                                                           self.inputargs["gcloud_src_dir"])

        results = execute3(cmd,exit_error=False,output_to_json=None)
        
        self.cleanup_docker_run()

        return results

    def run(self):

        self.set_required()
        self._set_uninputted_variables()
        self._template_to_config()

        results = self._run()

        status = results.get("status")
        output = results.get("output")

        self.logger.debug('')
        self.logger.debug(output)
        self.logger.debug('')

        # failure
        if not status: exit(9)

        # success
        print "_ed_output"
        print output
        print "_ed_output"

        return results

def usage():

    print """
script + environmental variables

or

script + json_input (as argument)

environmental variables:
    basic:
        GCLOUD_PROJECT  
        GOOGLE_APPLICATION_CREDENTIALS
        METHOD
        DOCKER_BUILD_DIR
        GCLOUD_SRC_DIR

    run:
        GCLOUD_TEMPLATE_FILE_PATH
        GCLOUD_CONFIG_FILE_PATH
        IMAGE_NAME

       """
    exit(4)

if __name__ == '__main__':

    try:
        json_input = sys.argv[1]
    except:
        json_input = None

    main = Main()

    if json_input:
        main.set_inputargs(json_input=json_input)
    else:
        set_env_vars = [ "method",
                         "gcloud_project",
                         "google_application_credentials",
                         "docker_build_dir",
                         "gcloud_src_dir",
                         "gcloud_template_file_path",
                         "gcloud_config_file_path",
                         "image_name" ]

        main.set_inputargs(set_env_vars=set_env_vars)
   
    method = main.inputargs.get("method")

    if not method:
        print "method/ENV VARIABLE METHOD is needed"
        exit(4)

    # Set class and region
    main.get_region()

    if method == "run":

        req_keys = [ "image_name",
                     "gcloud_project" ]

        main.check_required_inputargs(keys=req_keys)
        main.run()

    else:
        usage()
        print 'method "{}" not supported!'.format(method)
        exit(4)
