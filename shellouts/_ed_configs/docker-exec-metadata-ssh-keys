#!/usr/bin/env python

import os
import sys
from ed_helper_publisher.cloud.gcloudcli import GcloudCli
from ed_helper_publisher.loggerly import ElasticDevLogger
from ed_helper_publisher.utilities import id_generator
from ed_helper_publisher.shellouts import execute3

class Main(GcloudCli):

    def __init__(self,**kwargs):

        GcloudCli.__init__(self)
        self.classname = 'GcloudSSHkeyMetadata'
        self.logger = ElasticDevLogger(self.classname,logcategory="cloudprovider")
        self.logger.debug("Instantiating %s" % self.classname)
        self.product = "ssh-keys"
        self.provider = "gcloud"
        self.shelloutconfig = "elasticdev:::gcloud::docker-exec-metadata-ssh-keys"

    def _set_filename(self):
        self.filename = os.path.join(self.stateful_dir,id_generator(8))

    def _write_ssh_keys(self):
    
        if not self.inputargs["gcloud_ssh_keys"]: 
            self.logger.error('cannot find environmental variables "GCLOUD_SSH_KEYS" to find any ssh keys to create metadatafile with')
            exit(9)
    
        self.logger.debug("Creating temporary ssh key metafile {}".format(self.filename))
    
        with open(self.filename, "w") as outfile: 
            for _input in self.inputargs["gcloud_ssh_keys"].split(","):
                #outfile.write("{}:{}".format(_name.strip(),_key.strip())) 
                outfile.write("{}".format(_input))
                outfile.write("\n")
    
    def _run(self):
    
        status = self.init_docker_run()

        if not status:
            self.cleanup_docker_run()
            exit(9)

        cmd = "docker run --rm -ti -v {}:{} --volumes-from {} google/cloud-sdk gcloud compute project-info add-metadata --metadata-from-file ssh-keys={}".format(self.filename,
                                                                                                                                                                 self.filename,
                                                                                                                                                                 self.gcloud_container_name,
                                                                                                                                                                 self.filename)
    
        results = execute3(cmd,exit_error=False,output_to_json=None)
        
        self.cleanup_docker_run()

        return results

    def run(self):

        self.set_required()
        self._set_filename()
        self._write_ssh_keys()

        results = self._run()

        status = results.get("status")
        output = results.get("output")

        self.logger.debug('')
        self.logger.debug(output)
        self.logger.debug('')

        # failure
        if not status: exit(9)

        # success
        print "_ed_output"
        print output
        print "_ed_output"

        return results

if __name__ == '__main__':

    try:
        json_input = sys.argv[1]
    except:
        json_input = None

    main = Main()

    if json_input:
        main.set_inputargs(json_input=json_input)
    else:
        set_env_vars = [ "google_application_credentials",
                         "gcloud_project",
                         "gcloud_ssh_keys" ]

        main.set_inputargs(set_env_vars=set_env_vars)

    main.check_required_inputargs(keys=[ "gcloud_project",
                                         "gcloud_ssh_keys" ])

    main.run()
